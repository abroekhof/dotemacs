* Initialization
** Everyone does this
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
#+end_src

** Make sure Emacs uses the shell PATH
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-initialize)))
#+END_SRC

** Get rid of tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
     (setq-default tab-width 8)            ;; but maintain correct appearance
   #+END_SRC

** Delete the selection with a keypress
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** Better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC

** Enable y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
  (setq
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)
#+END_SRC

** OSX Behavior
Taken from the Spacemacs OSX module
#+BEGIN_SRC emacs-lisp
  (when (equal system-type 'darwin)
    ;; Treat option as meta and command as super
    (setq mac-option-key-is-meta t)
    (setq mac-command-key-is-meta nil)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta))
#+END_SRC

** Whitespace cleanup
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Revert buffers automatically when underlying files are changed externally
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Fix C&P quirk in iTerm
#+begin_src emacs-lisp
  (setq xterm-extra-capabilities '(setSelection))
#+end_src

* UI settings
** Font
#+BEGIN_SRC emacs-lisp
  (when (member "Hack" (font-family-list))
    (set-face-attribute 'default nil
                        :family "Hack"
                        :height 120
                        :weight 'normal
                        :width 'normal))
#+END_SRC

** Turn off the scroll bar and the tool bar and the menu bar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

** Use a nice theme
#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :config
    (load-theme 'leuven t))
#+END_SRC

** Turn on blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode t)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Enable column numbers
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :hook (prog-mode . rainbow-delimiters-mode)
     :diminish rainbow-delimiters-mode)
#+END_SRC

* Movement
** Avy (navigation)
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-c j" . avy-goto-word-or-subword-1))
    :config
    (setq avy-background -1))
#+END_SRC

** Switch window
 #+BEGIN_SRC emacs-lisp
   (use-package switch-window
       :bind ("C-x o" . switch-window))

   (use-package ace-window
     :bind* ("M-o" . ace-window)
     :init
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     (custom-set-faces
      '(aw-leading-char-face
        ((t (:inherit ace-jump-face-foreground :height 3.0))))))

   (use-package windmove
     :config (windmove-default-keybindings 'shift))
 #+END_SRC

** Buffer moving
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind (
           ("C-M-h" . buf-move-left)
           ("C-M-j" . buf-move-down)
           ("C-M-k" . buf-move-up)
           ("C-M-l" . buf-move-right)))
#+END_SRC

* Editor behavior
** Hippie expand settings
#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :bind ("M-/" . hippie-expand)
    :init (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                                   try-expand-dabbrev-all-buffers
                                                   try-expand-dabbrev-from-kill
                                                   try-complete-file-name-partially
                                                   try-complete-file-name
                                                   try-expand-all-abbrevs
                                                   try-expand-list
                                                   try-expand-line
                                                   try-complete-lisp-symbol-partially
                                                   try-complete-lisp-symbol)))
#+END_SRC

** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+END_SRC

** Smart Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init
    (smartparens-global-mode 1)
    (show-smartparens-global-mode 1)
    :diminish smartparens-mode)
#+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-separator "/")
    (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
    (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
    )
#+END_SRC

** Savehist keeps track of some history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (progn
      (setq savehist-file "~/.emacs.d/savehist")
      (setq savehist-additional-variables '(search-ring regexp-search-ring)
            savehist-autosave-interval 60
            history-length t
            history-delete-duplicates t
            savehist-save-minibuffer-history 1)
      (savehist-mode +1)))
#+END_SRC

** Save recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init (progn(setq recentf-max-saved-items 500
                      recentf-max-menu-items 15)
                (recentf-mode +1)))
#+END_SRC

** Multiple Cursors
I've gotten more proficient at rectangle mode and macros, so I'm not sure if I still need this mode.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init
    (progn
      ;; these need to be defined here - if they're lazily loaded with
      ;; :bind they don't work.
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)))
#+END_SRC

** Crux
=crux= has useful functions extracted from Emacs Prelude. Set =C-a= to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.

#+BEGIN_SRC emacs-lisp
  (use-package crux)

  (global-set-key (kbd "C-a") #'crux-move-beginning-of-line)
  (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
#+END_SRC

** Anzu replace
 #+BEGIN_SRC emacs-lisp
   (use-package anzu
     :diminish anzu-mode
     :bind (("M-%" . anzu-query-replace)
            ("C-M-%" . anzu-query-replace-regexp))
     :init (global-anzu-mode 1))
 #+END_SRC

** Undo tree
 #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :init (progn(setq undo-tree-visualizer-diff t
                       undo-tree-visualizer-timestamps t)
                 (global-undo-tree-mode)))
 #+END_SRC

** Expand region
 #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :commands er/expand-region
     :bind ("M-2" . er/expand-region))
 #+END_SRC

** Highlight symbol
When you hover on a symbol, it will highlight other occurrences in the buffer.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :diminish
    :hook (prog-mode . highlight-symbol-mode)
    :config
    (setq highlight-symbol-idle-delay 0.25))
#+END_SRC

* Ivy
** Ivy config
#+BEGIN_SRC emacs-lisp
    (use-package ag)
    (use-package wgrep)
    (use-package amx)

    (use-package ivy
      :diminish ivy-mode
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-height 20)
      (global-set-key (kbd "C-c C-r") 'ivy-resume))

    (use-package counsel
      :diminish
      :after ivy
      :bind (("C-s" . counsel-grep-or-swiper))
      :config
      (counsel-mode)
      (setq counsel-grep-base-command
            "rg -i --no-heading --line-number --color never '%s' %s"))

    (use-package ivy-rich
      :after ivy
      :config
      (ivy-rich-mode 1)
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

    (use-package counsel-projectile
      :config
      (counsel-projectile-mode +1))

    (use-package swiper
      :after ivy
      :config
      (setq swiper-action-recenter t)
      (setq swiper-goto-start-of-match t))
#+END_SRC

* Org settings
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (auto-save . org-save-all-org-buffers))
    :config
    (setq org-src-fontify-natively t)
    (setq org-fontify-whole-heading-line t)
    (setq org-src-tab-acts-natively t)
    (setq org-log-done 'time)
    (setq org-export-backends '(ascii html icalendar latex md odt))

    (setq org-agenda-files (quote ("~/org")))
    (setq org-default-notes-file "~/org/notes.org")

    (define-key global-map (kbd "C-c c") 'counsel-org-capture)
    (define-key global-map (kbd "C-c a") 'org-agenda)
    (define-key global-map (kbd "C-c C-x C-j") 'org-clock-goto)

    ;; Resolve open-clocks if idle
    (setq org-clock-idle-time 10)

    (global-set-key [remap org-set-tags-command] #'counsel-org-tag)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((calc . t)
       (dot . t)))

    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
             "* TODO %?\n%u\n")
            ("m" "Meeting" entry (file+headline org-default-notes-file "Meetings")
             "* MEETING %? :meeting:\n%T")
            ("a" "Append to clocked in" item (clock))
            ("n" "Note" entry (file+headline org-default-notes-file "Notes")
             "* NOTE %?\n%U" :empty-lines 1) ))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))
    (defun log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
                 (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
    (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm))
#+END_SRC

** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Org exporting
Prevent underscores from being escaped
#+begin_src emacs-lisp
  (setq org-export-with-sub-superscripts '{})
#+end_src

*** Github-flavored Markdown
#+begin_src emacs-lisp
(use-package ox-gfm
  :after (org))
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
      :custom
      (org-roam-directory (file-truename "~/org/roam"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      (setq org-roam-v2-ack t)
      (org-roam-setup))
#+end_src

** Olivetti mode
Try to make text buffers more readable on a big screen
#+begin_src emacs-lisp
  (use-package olivetti
    :hook (text-mode . olivetti-mode)
    :config
    (setq-default olivetti-body-width 120))
#+end_src

* Version control
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (setq git-commit-fill-column 70))
#+END_SRC

** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :bind ("M-g t" . git-timemachine-toggle))
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :commands (global-git-gutter-mode git-gutter-mode)
    :init
    (progn
      (global-git-gutter-mode t)
      (setq git-gutter:modified-sign "|"
            git-gutter:added-sign "+"
            git-gutter:deleted-sign "-"
            git-gutter:hide-gutter t))
    :diminish git-gutter-mode)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :bind-keymap
    ("C-c p" . projectile-command-map)

    :config (progn
              (setq projectile-completion-system 'ivy)
              (setq projectile-switch-project-action 'counsel-projectile)
              (projectile-global-mode t))
    :init      (progn
                 (setq projectile-indexing-method     'alien
                       projectile-enable-caching      t)))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-dabbrev-downcase nil)
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.15)
    (add-to-list 'company-backends 'company-capf))
#+END_SRC

* Programming modes

** Fill column
#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

** Compilation
#+begin_src emacs-lisp
  (setq shell-file-name "bash")
  (setq shell-command-switch "-lc")
  (setq compilation-scroll-output t)
#+end_src

** C/C++
*** Behavior
 Use a better indentation for C code.
 #+BEGIN_SRC emacs-lisp
      (use-package google-c-style
        :straight (:type git :host github :repo "google/styleguide"
                         :files ("google-c-style.el"))
        :config
        (add-hook 'c-mode-common-hook 'google-set-c-style)
        (add-hook 'c-mode-common-hook 'google-make-newline-indent))
 #+END_SRC

*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :hook (
           (c-mode . lsp)
           (cpp-mode . lsp)
           (c++-mode . lsp)
           ;; (python-mode. lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  (use-package which-key
    :diminish
    :config
    (which-key-mode))

#+END_SRC

** Python
#+begin_src emacs-lisp
  (use-package pyvenv
    :config
    ;; Setting work on to easily switch between environments
    (setenv "WORKON_HOME" (expand-file-name "~/.virtualenvs"))
    ;; Display virtual envs in the menu bar
    (setq pyvenv-menu t)
    ;; Restart the python process when switching environments
    (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                            (pyvenv-restart-python)))
    :hook (python-mode . pyvenv-mode))

  (use-package python
    :config
    ;; Remove guess indent python message
    (setq python-indent-guess-indent-offset-verbose nil)
    ;; Use IPython when available or fall back to regular Python
    (cond
     ((executable-find "ipython")
      (progn
        (setq python-shell-buffer-name "IPython")
        (setq python-shell-interpreter "ipython")
        (setq python-shell-interpreter-args "-i --simple-prompt")))
     ((executable-find "python3")
      (setq python-shell-interpreter "python3"))
     ((executable-find "python2")
      (setq python-shell-interpreter "python2"))
     (t
      (setq python-shell-interpreter "python"))))

  ;; Language server for Python
  ;; Read the docs for the different variables set in the config.
  ;; (use-package lsp-pyright
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp)))
  ;;   :config
  ;;   (setq lsp-pyright-venv-path "~/.virtualenvs"))


  ;; (use-package blacken
  ;;   :hook (python-mode . blacken-mode))

#+end_src

** Protocol Buffers
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :mode "\\.proto\\'"
    :config
    (defconst my-protobuf-style
      '((c-basic-offset . 2)
        (indent-tabs-mode . nil)))
    (add-hook 'protobuf-mode-hook
              (lambda () (c-add-style "my-style" my-protobuf-style t)))
    )
#+END_SRC

** Makefiles
#+BEGIN_SRC emacs-lisp
  ;; (use-package makefile-mode
  ;;   :straight nil
  ;;   :mode "\\.mak\\")
#+END_SRC

** GN files
#+BEGIN_SRC emacs-lisp
  (use-package gn-mode
    :mode "\\.gn$")
#+END_SRC

** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.csv$")
#+END_SRC

** RMSBolt
#+begin_src emacs-lisp
  (use-package rmsbolt)
#+end_src

** Go
#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

* Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish
    :if (executable-find "aspell")
    :hook
    ((org-mode yaml-mode markdown-mode git-commit-mode) . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    (before-save-hook . flyspell-buffer)
    (flyspell-mode . (lambda ()
                       (dolist (key '("C-;" "C-," "C-."))
                         (unbind-key key flyspell-mode-map))))
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "aspell")
    (ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
    :config
    (use-package flyspell-correct-ivy
      :bind ("C-M-:" . flyspell-correct-at-point)
      :config
      (when (eq system-type 'darwin)
        (progn
          (global-set-key (kbd "C-M-;") 'flyspell-correct-at-point)))
      (setq flyspell-correct-interface #'flyspell-correct-ivy)))
#+END_SRC

* Very Large Files
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :config (progn
            (require 'vlf-setup)))
#+END_SRC

* Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :commands (elfeed))

  (use-package elfeed-org
    :after elfeed
    :config
    (setq rmh-elfeed-org-files (list "~/.emacs.d/README.org"))
    (elfeed-org))

#+end_src
** Blogs                                                             :elfeed:
*** Music                                                             :music:
**** https://thequietus.com/feed
**** http://castthedice.org/feed
**** [[https://feeds.npr.org/510292/podcast.xml][Tiny Desk]]
**** Pitchfork                                                    :pitchfork:
***** https://pitchfork.com/rss/reviews/best/albums/
***** https://pitchfork.com/rss/reviews/best/reissues/
***** https://pitchfork.com/rss/reviews/best/tracks/
***** https://pitchfork.com/rss/reviews/tracks/
***** https://pitchfork.com/rss/reviews/albums/
***** https://pitchfork.com/rss/thepitch/
***** https://pitchfork.com/rss/features/
*** News                                                               :news:
**** http://rss.slashdot.org/Slashdot/slashdotMain
*** Cooking                                                         :cooking:
**** https://www.101cookbooks.com/feed
*** Cycling                                                         :cycling:
**** Bikepacking                                                :bikepacking:
***** https://bikepacking.com/feed/
***** http://bearbonesbikepacking.blogspot.com/feeds/posts/default?alt=rss
**** https://theradavist.com/feed/
*** Architecture
**** https://www.darrenbradleyphotography.com//blog-feed.xml
**** http://www.bldgblog.com/feed/
**** http://feeds.feedburner.com/Archdaily

* Custom functions
** Copy the current buffer's file path or dired path to `kill-ring'.
Result is full path.
If `universal-argument' is called first, copy only the dir path.

If in dired, copy the file/dir cursor is on, or marked files.

If a buffer is not file and not dired, copy value of `default-directory' (which is usually the “current” dir when that buffer was created)

URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
Version 2017-09-01
#+BEGIN_SRC emacs-lisp
  (defun xah-copy-file-path (&optional @dir-path-only-p)
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if @dir-path-only-p
           (progn
             (message "Directory path copied: 「%s」" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: 「%s」" $fpath)
           $fpath )))))
#+END_SRC

The end.
* VTerm
Requires modifying .bashrc as well, so go to the website to see what the latest is
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq vterm-max-scrollback 100000)
    (setq vterm-shell "/bin/zsh"))
#+end_src

** multi-vterm
This seems to now be required to start up multiple vterm instances?
#+begin_src emacs-lisp
  (use-package multi-vterm)
#+end_src

* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode
    (
     ".html?$"
     ".vue$"
     ".tsx$"
     )
    :config
    (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-pairing t
     web-mode-enable-auto-indentation t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :straight auctex)
#+END_SRC
