* Initialization
** Make sure Emacs uses the shell PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize)
    :ensure t
    )
#+END_SRC

* Editor behavior
** Get rid of tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
     (setq-default tab-width 8)            ;; but maintain correct appearance
   #+END_SRC

** Delete the selection with a keypress
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** Revert buffers automatically when underlying files are changed externally
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Hippie expand settings
#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :ensure t
    :bind ("M-/" . hippie-expand)
    :init (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                                   try-expand-dabbrev-all-buffers
                                                   try-expand-dabbrev-from-kill
                                                   try-complete-file-name-partially
                                                   try-complete-file-name
                                                   try-expand-all-abbrevs
                                                   try-expand-list
                                                   try-expand-line
                                                   try-complete-lisp-symbol-partially
                                                   try-complete-lisp-symbol)))
#+END_SRC

** Better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC

** Enable y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Smart Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :init (progn
            (smartparens-global-mode 1)
            (show-smartparens-global-mode 1))
    :ensure smartparens
    :diminish smartparens-mode)
#+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :init(progn(setq uniquify-buffer-name-style 'forward)
               (setq uniquify-separator "/")
               (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
               (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
               )
    )
#+END_SRC

** Saveplace remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (setq-default save-place t)
    )
#+END_SRC

** Save recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init (progn(setq recentf-max-saved-items 500
                      recentf-max-menu-items 15)
                (recentf-mode +1))
    :ensure t)
#+END_SRC

** Savehist keeps track of some history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (progn
      (setq savehist-file "~/.emacs.d/savehist")
      (setq savehist-additional-variables '(search-ring regexp-search-ring)
            savehist-autosave-interval 60
            history-length t
            history-delete-duplicates t
            savehist-save-minibuffer-history 1)
      (savehist-mode +1)))
#+END_SRC

** Backups
   Borrowed from Sacha Chua
   https://github.com/sachac/.emacs.d/

   This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+end_src

   Disk space is cheap. Save lots.

   #+begin_src emacs-lisp
     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** Save desktop
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

** Multiple Cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (progn
         ;; these need to be defined here - if they're lazily loaded with
         ;; :bind they don't work.
         (global-set-key (kbd "C->") 'mc/mark-next-like-this)
         (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
         (global-set-key (kbd "C-c C-l") 'mc/edit-ends-of-lines)))
   #+END_SRC

** OSX Behavior
Taken from the Spacemacs OSX module
#+BEGIN_SRC emacs-lisp
  (when (equal system-type 'darwin)
    ;; Treat option as meta and command as super
    (setq mac-option-key-is-meta t)
    (setq mac-command-key-is-meta nil)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta))
#+END_SRC

Use Super to get modern-style keybindings.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-q") 'save-buffers-kill-terminal)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-w") 'kill-this-buffer)
  (global-set-key (kbd "s-z") 'undo-tree-undo)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-Z") 'undo-tree-redo)
#+END_SRC

** C/C++ Behavior
Use a better indentation for C code.
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC

* UI settings
** Turn off the scroll bar and the tool bar and the menu bar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

** Use a nice theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init (progn (load-theme 'doom-vibrant t))
    )
  (use-package helm-themes
    :ensure t
    )
#+END_SRC

** Turn on blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode t)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :diminish rainbow-delimiters-mode
    :ensure t)
  (use-package smart-mode-line
    :ensure    smart-mode-line
    :init      (setq sml/theme 'dark)
    :config    (sml/setup))
#+END_SRC
   
* Org settings
** Make sure that code is highlighted properly in org files
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

* Anzu replace
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :diminish anzu-mode
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp))
    :init (global-anzu-mode 1)
    :ensure t)
#+END_SRC

* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init (progn(setq undo-tree-visualizer-diff t
                      undo-tree-visualizer-timestamps t)
                (global-undo-tree-mode))
    :ensure t)
#+END_SRC

* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window)
    :ensure t)

  (use-package windmove
    :config (windmove-default-keybindings 'shift))
#+END_SRC

* Version control
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :ensure t
    )
#+END_SRC

** Highlight diffs
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode)
    :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config (progn
              (setq projectile-completion-system 'helm)
              (setq projectile-switch-project-action 'helm-projectile)
              (projectile-global-mode t)
              )
    :init      (progn
                 (setq projectile-indexing-method     'alien
                       projectile-enable-caching      t))
    :ensure t)
#+END_SRC

* Helm
** Helm configurations
#+BEGIN_SRC emacs-lisp
    (use-package helm
      :bind (("M-x"     . helm-M-x)
             ("C-x C-f" . helm-find-files)
             ("C-x C-r" . helm-recentf)
             ("M-y" . helm-show-kill-ring)
             ("C-x b" . helm-mini)
             ("C-h f" . helm-apropos)
             ("C-h r" . helm-info-emacs)
             ("C-h C-l" . helm-locate-library)
             ("C-h SPC" . helm-all-mark-rings))

      :init (progn
              (use-package helm-config)
              (use-package helm-projectile
                :init (helm-projectile-on)
                :ensure t)
              (use-package helm-descbinds
                :init (helm-descbinds-mode)
                :ensure t)
              (setq helm-split-window-in-side-p           nil ; open helm buffer inside current window, not occupy whole other window
                    helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
                    helm-M-x-fuzzy-matching               t ; fuzzy matching for M-x
                    helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
                    helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
                    helm-ff-file-name-history-use-recentf t)
              (helm-mode +1)
              (define-key helm-command-map (kbd "o")     'helm-occur)
              (define-key helm-command-map (kbd "g")     'helm-do-grep)
              (define-key helm-command-map (kbd "C-c w") 'helm-wikipedia-suggest)
              (define-key helm-command-map (kbd "SPC")   'helm-all-mark-rings)
              (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
              (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
              (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
              )
      :ensure t
      :diminish helm-mode
  )
#+END_SRC

** Helm swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :bind (("C-c C-SPC" . helm-swoop)
           ("C-c o" . helm-multi-swoop-all)
           ("C-s"   . helm-swoop)
           ("C-r"   . helm-resume))
    :ensure t)
#+END_SRC
* Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (progn(setq company-idle-delay 0.5)
                  (setq company-tooltip-limit 10)
                  (setq company-minimum-prefix-length 2)
                  (setq company-tooltip-flip-when-above t)
                  (add-hook 'after-init-hook 'global-company-mode))
    :diminish company-mode
    :ensure t)
#+END_SRC

* Guide key
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :init (guide-key-mode 1)
    :config (setq guide-key/guide-key-sequence
                  '("C-x"(projectile-mode "C-c p"))
                  guide-key/recursive-key-sequence-flag t)
    :ensure t)
#+END_SRC

* Package list
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
  )
#+END_SRC

* Buffer moving
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind (
           ("C-M-h" . buf-move-left)
           ("C-M-j" . buf-move-down)
           ("C-M-k" . buf-move-up)
           ("C-M-l" . buf-move-right)))
#+END_SRC
