* Initialization
** Make sure Emacs uses the shell PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize)
    :ensure t
    )
#+END_SRC

* Editor behavior
** Get rid of tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
     (setq-default tab-width 8)            ;; but maintain correct appearance
   #+END_SRC

** Delete the selection with a keypress
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** Revert buffers automatically when underlying files are changed externally
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Hippie expand settings
#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :ensure t
    :bind ("M-/" . hippie-expand)
    :init (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                                   try-expand-dabbrev-all-buffers
                                                   try-expand-dabbrev-from-kill
                                                   try-complete-file-name-partially
                                                   try-complete-file-name
                                                   try-expand-all-abbrevs
                                                   try-expand-list
                                                   try-expand-line
                                                   try-complete-lisp-symbol-partially
                                                   try-complete-lisp-symbol)))
#+END_SRC

** Better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC

** Enable y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
   
** Smart Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :init (progn
            (smartparens-global-mode 1)
            (show-smartparens-global-mode 1))
    :ensure smartparens
    :diminish smartparens-mode)
#+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :init(progn(setq uniquify-buffer-name-style 'forward)
               (setq uniquify-separator "/")
               (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
               (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
               )
    )
#+END_SRC

** Saveplace remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (setq-default save-place t)
    )
#+END_SRC

** Save recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init (progn(setq recentf-max-saved-items 500
                      recentf-max-menu-items 15
                      ;; disable recentf-cleanup on Emacs start, because it can cause
                      ;; problems with remote files
                      recentf-auto-cleanup 'never)
                (recentf-mode +1))
    :ensure t)
#+END_SRC
   
** Savehist keeps track of some history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (progn
      (setq savehist-file "~/emacs.d/savehist")
      (setq savehist-additional-variables '(search-ring regexp-search-ring)
            savehist-autosave-interval 60
            history-length t
            history-delete-duplicates t
            savehist-save-minibuffer-history 1)
      (savehist-mode +1)))
#+END_SRC
** Backups
   Borrowed from Sacha Chua
   https://github.com/sachac/.emacs.d/

   This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+end_src

   Disk space is cheap. Save lots.

   #+begin_src emacs-lisp
     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** Volatile highlights
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :init (volatile-highlights-mode t)
    :diminish volatile-highlights-mode
    :ensure t)
#+END_SRC

** Save desktop
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

* UI settings
** Turn off the scroll bar and the tool bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

** Use a nice theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t)
  )
#+END_SRC

** Turn on blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode t)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** More info in the mode line
#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+END_SRC

** Make the fringe (gutter) smaller
   The argument is a width in pixels (the default is 8)
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'fringe-mode)
      (fringe-mode 4))
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :diminish rainbow-delimiters-mode
    :ensure t)
#+END_SRC

** Clean up obsolete buffers automatically
#+BEGIN_SRC emacs-lisp
(require 'midnight)
#+END_SRC
  
* Org settings
** Make sure that code is highlighted properly in org files
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

* Spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :defer t
    :init (setq ispell-program-name "aspell" ; use aspell instead of ispell
              ispell-extra-args '("--sug-mode=ultra"))
    :config (flyspell-setup)
    :ensure t)

  (defun flyspell-setup ()
    "Deferred setup of flyspell-mode."
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'org-mode-hook 'flyspell-mode))
#+END_SRC
  
* Syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

* Anzu replace
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :diminish anzu-mode
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp))
    :init (global-anzu-mode 1)
    :ensure t)
#+END_SRC

* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init (progn(setq undo-tree-visualizer-diff t
                      undo-tree-visualizer-timestamps t)
                (global-undo-tree-mode))
    :ensure t)
#+END_SRC

* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window)
    :ensure t)
#+END_SRC

* Version control
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :ensure t
    )
#+END_SRC

** Highlight diffs
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode)
    :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :commands (projectile-global-mode projectile-ignored-projects projectile-compile-project)
    :init (progn
            (projectile-global-mode))
           
    :config (progn
              (setq projectile-completion-system 'helm)
              (setq projectile-switch-project-action 'helm-projectile)
              )
    :ensure t)
#+END_SRC

* Helm
** Helm configurations
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind (("M-x"     . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x C-r" . helm-recentf)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-h f" . helm-apropos)
           ("C-h r" . helm-info-emacs)
           ("C-h C-l" . helm-locate-library))
      
    :init (progn
            (use-package helm-config)
            (use-package helm-projectile
              :init (helm-projectile-on)
              :ensure t)
            (use-package helm-descbinds
              :init (helm-descbinds-mode)
              :ensure t)
            (setq helm-split-window-in-side-p           nil ; open helm buffer inside current window, not occupy whole other window
                  helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
                  helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
                  helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
                  helm-ff-file-name-history-use-recentf t)
            (helm-mode +1)
            (define-key helm-command-map (kbd "o")     'helm-occur)
            (define-key helm-command-map (kbd "g")     'helm-do-grep)
            (define-key helm-command-map (kbd "C-c w") 'helm-wikipedia-suggest)
            (define-key helm-command-map (kbd "SPC")   'helm-all-mark-rings))
    :ensure t)
#+END_SRC

** Helm swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :bind (("C-c C-SPC" . helm-swoop)
           ("C-c o" . helm-multi-swoop-all)
           ("C-s"   . helm-swoop)
           ("C-r"   . helm-resume))
    :ensure t)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (progn(setq company-idle-delay 0.5)
                  (setq company-tooltip-limit 10)
                  (setq company-minimum-prefix-length 2)
                  (setq company-tooltip-flip-when-above t)
                  (add-hook 'after-init-hook 'global-company-mode))
    :ensure t)
#+END_SRC
* Guide key
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :init (guide-key-mode 1)
    :config (setq guide-key/guide-key-sequence
                  '("C-x"(projectile-mode "C-c p"))
                  guide-key/recursive-key-sequence-flag t)
    :ensure t)
#+END_SRC

* Anaconda
#+BEGIN_SRC emacs-lisp

(use-package anaconda-mode
  :ensure anaconda-mode
  :commands anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'eldoc-mode)))

(use-package company-anaconda
  :ensure company-anaconda
  :init (add-to-list 'company-backends 'company-anaconda))
#+END_SRC
* Javascript (js2-mode)
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :ensure t)
#+END_SRC

* Web mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.phtml\\'" . web-mode) ("\\.erb\\'" . web-mode)
         ("\\.jsp\\'" . web-mode) ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode) ("\\.html\\'" . web-mode)
         ("\\.rhtml\\'" . web-mode) ("\\.mustache\\'" . web-mode))
    :config
  (progn
    (bind-key "C-c ;" 'web-mode-comment-or-uncomment web-mode-map)
    (unbind-key "C-c C-p" web-mode-map)
    (unbind-key "C-c C-n" web-mode-map)))
#+END_SRC

* Package list
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
  )
#+END_SRC
