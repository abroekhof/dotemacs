* Initialization
** Make sure Emacs uses the shell PATH
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :ensure t
      :config (exec-path-from-shell-initialize)))
#+END_SRC

** Get rid of tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
     (setq-default tab-width 8)            ;; but maintain correct appearance
   #+END_SRC
** Delete the selection with a keypress
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** Better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC

** Enable y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Backups
A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

** Save desktop
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

** OSX Behavior
Taken from the Spacemacs OSX module
#+BEGIN_SRC emacs-lisp
  (when (equal system-type 'darwin)
    ;; Treat option as meta and command as super
    (setq mac-option-key-is-meta t)
    (setq mac-command-key-is-meta nil)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta))
#+END_SRC

** Whitespace cleanup
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Revert buffers automatically when underlying files are changed externally
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

* UI settings
** Font
#+BEGIN_SRC emacs-lisp
(if (member "DejaVu Sans Mono" (font-family-list))
    (set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 110))
#+END_SRC

** Turn off the scroll bar and the tool bar and the menu bar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

** Use a nice theme
#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :ensure t
    :init (progn (load-theme 'leuven t)))

  (use-package helm-themes
    :ensure t)
#+END_SRC

** Turn on blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode t)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     :diminish rainbow-delimiters-mode
     :ensure t)
#+END_SRC

** Smart Mode Line
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
     (setq sml/theme 'light)
     (sml/setup))
#+END_SRC

* Movement
** Avy (navigation)
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("C-;" . avy-goto-word-or-subword-1))
  :config
  (setq avy-background t))
#+END_SRC

** Switch window
 #+BEGIN_SRC emacs-lisp
   (use-package switch-window
       :bind ("C-x o" . switch-window)
       :ensure t)

   (use-package ace-window
     :bind* ("M-o" . ace-window)
     :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     :ensure t)

   (use-package windmove
     :config (windmove-default-keybindings 'shift))
 #+END_SRC

** Buffer moving
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind (
           ("C-M-h" . buf-move-left)
           ("C-M-j" . buf-move-down)
           ("C-M-k" . buf-move-up)
           ("C-M-l" . buf-move-right)))
#+END_SRC

* Editor behavior
** Record key frequency
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

** Hippie expand settings
#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :ensure t
    :bind ("M-/" . hippie-expand)
    :init (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                                   try-expand-dabbrev-all-buffers
                                                   try-expand-dabbrev-from-kill
                                                   try-complete-file-name-partially
                                                   try-complete-file-name
                                                   try-expand-all-abbrevs
                                                   try-expand-list
                                                   try-expand-line
                                                   try-complete-lisp-symbol-partially
                                                   try-complete-lisp-symbol)))
#+END_SRC

** Smart Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :init (progn
            (smartparens-global-mode 1)
            (show-smartparens-global-mode 1))
    :ensure smartparens
    :diminish smartparens-mode)
#+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+END_SRC
** Saveplace remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (setq-default save-place t)
    )
#+END_SRC

** Savehist keeps track of some history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (progn
      (setq savehist-file "~/.emacs.d/savehist")
      (setq savehist-additional-variables '(search-ring regexp-search-ring)
            savehist-autosave-interval 60
            history-length t
            history-delete-duplicates t
            savehist-save-minibuffer-history 1)
      (savehist-mode +1)))
#+END_SRC

** Save recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init (progn(setq recentf-max-saved-items 500
                      recentf-max-menu-items 15)
                (recentf-mode +1))
    :ensure t)
#+END_SRC

** Multiple Cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (progn
         ;; these need to be defined here - if they're lazily loaded with
         ;; :bind they don't work.
         (global-set-key (kbd "C->") 'mc/mark-next-like-this)
         (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
         (global-set-key (kbd "C-c C-l") 'mc/edit-ends-of-lines)))
   #+END_SRC

** Crux
=crux= has useful functions extracted from Emacs Prelude. Set =C-a= to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t)

  (global-set-key (kbd "C-a") #'crux-move-beginning-of-line)
  (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
#+END_SRC

** Anzu replace
 #+BEGIN_SRC emacs-lisp
   (use-package anzu
     :diminish anzu-mode
     :bind (("M-%" . anzu-query-replace)
            ("C-M-%" . anzu-query-replace-regexp))
     :init (global-anzu-mode 1)
     :ensure t)
 #+END_SRC

** Undo tree
 #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :init (progn(setq undo-tree-visualizer-diff t
                       undo-tree-visualizer-timestamps t)
                 (global-undo-tree-mode))
     :ensure t)
 #+END_SRC

** Expand region
 #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :commands er/expand-region
     :bind ("C-=" . er/expand-region))
 #+END_SRC

** Guide key
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :init (guide-key-mode 1)
    :config (setq guide-key/guide-key-sequence
                  '("C-x"(projectile-mode "C-c p"))
                  guide-key/recursive-key-sequence-flag t)
    :ensure t)
#+END_SRC

** Highlight symbol
When you hover on a symbol, it will highlight other occurrences in the buffer.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :diminish
    :ensure t
    :hook ((c-mode c++-mode) . highlight-symbol-mode)
    :config
    (setq highlight-symbol-idle-delay 0.25))
#+END_SRC
** Aggressive Indent
 #+BEGIN_SRC emacs-lisp
   (use-package aggressive-indent
     :ensure t)
 #+END_SRC

* Ivy
** Ivy config
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)

  (use-package smex
    :ensure t)

  (use-package counsel
    :ensure t
    :diminish counsel-mode
    :config (counsel-mode))

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :config
    (progn
      (ivy-rich-mode)))

  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))

  (use-package counsel-projectile
    :ensure t
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))

  (use-package counsel-gtags
    :ensure t
    :diminish counsel-gtags-mode
    :config
    (add-hook 'c-mode-hook 'counsel-gtags-mode)
    (add-hook 'c++-mode-hook 'counsel-gtags-mode)

    (with-eval-after-load 'counsel-gtags
      (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
      (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
      (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
      (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-dwim)
      (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)))
#+END_SRC

* Org settings
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-log-done 'time)
  (setq org-default-notes-file "~/DriveFS/My Drive/org/inbox.org")
  (define-key global-map "\C-cc" 'counsel-org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-agenda-files (quote ("~/DriveFS/My Drive/org")))
  (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                   (org-agenda-files :maxlevel . 2))))
#+END_SRC

** Org -> Jira exporter
#+BEGIN_SRC emacs-lisp
  (use-package ox-jira :ensure t)
#+END_SRC

* Version control
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :ensure t
    )
#+END_SRC
** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :bind ("M-g t" . git-timemachine-toggle))
#+END_SRC
** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :commands (global-git-gutter-mode git-gutter-mode)
    :init
    (progn
      (global-git-gutter-mode t)
      (setq git-gutter:modified-sign "|"
            git-gutter:added-sign "+"
            git-gutter:deleted-sign "-"
            git-gutter:hide-gutter t))
    :ensure t
    :diminish git-gutter-mode)
#+END_SRC
** Smerge
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :diminish
  :preface
  (with-eval-after-load 'hydra
    (defhydra smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue)))
  :hook ((find-file . (lambda ()
                        (save-excursion
                          (goto-char (point-min))
                          (when (re-search-forward "^<<<<<<< " nil t)
                            (smerge-mode 1)))))
         (magit-diff-visit-file . (lambda ()
                                    (when smerge-mode
                                      (smerge-hydra/body))))))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (progn
              (setq projectile-completion-system 'ivy)
              (setq projectile-switch-project-action 'counsel-projectile)
              (projectile-global-mode t)
              (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
              )
    :init      (progn
                 (setq projectile-indexing-method     'alien
                       projectile-enable-caching      t))
    :ensure t)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (use-package company-irony :ensure t :defer t)
    (setq company-idle-delay              0.1
          company-minimum-prefix-length   2
          company-show-numbers            t
          company-tooltip-limit           20
          company-backends                '((company-irony company-gtags))
          )
    )
#+END_SRC
* Programming modes
** C/C++
*** Behavior
 Use a better indentation for C code.
 #+BEGIN_SRC emacs-lisp
   (setq c-default-style "linux"
         c-basic-offset 4)
   (c-set-offset 'case-label '+)
 #+END_SRC

*** Irony
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :diminish irony-mode
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

#+END_SRC

** Protocol Buffers
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :ensure t
    :mode "\\.proto\\'"
    :config
    (defconst my-protobuf-style
      '((c-basic-offset . 2)
        (indent-tabs-mode . nil)))
    (add-hook 'protobuf-mode-hook
              (lambda () (c-add-style "my-style" my-protobuf-style t)))
    )
#+END_SRC
** Makefiles

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mak\\'" . makefile-mode))
#+END_SRC
* Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish
  :if (executable-find "aspell")
  :hook
  ((org-mode yaml-mode markdown-mode git-commit-mode) . flyspell-mode)
  (prog-mode . flyspell-prog-mode)
  (before-save-hook . flyspell-buffer)
  (flyspell-mode . (lambda ()
                     (dolist (key '("C-;" "C-," "C-."))
                       (unbind-key key flyspell-mode-map))))
  :custom
  (flyspell-issue-message-flag nil)
  (ispell-program-name "aspell")
  (ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
  :custom-face
  (flyspell-incorrect ((t (:underline (:color "#f1fa8c" :style wave)))))
  (flyspell-duplicate ((t (:underline (:color "#50fa7b" :style wave)))))
  :preface
  (defun message-off-advice (oldfun &rest args)
    "Quiet down messages in adviced OLDFUN."
    (let ((message-off (make-symbol "message-off")))
      (unwind-protect
          (progn
            (advice-add #'message :around #'ignore (list 'name message-off))
            (apply oldfun args))
        (advice-remove #'message message-off))))
  :config
  (advice-add #'ispell-init-process :around #'message-off-advice)
  (use-package flyspell-correct-ivy
    :bind ("C-M-:" . flyspell-correct-at-point)
    :config
    (when (eq system-type 'darwin)
      (progn
        (global-set-key (kbd "C-M-;") 'flyspell-correct-at-point)))
    (setq flyspell-correct-interface #'flyspell-correct-ivy)))
#+END_SRC
* Very Large Files
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :ensure t
  :config (progn
            (require 'vlf-setup)))
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

* Custom functions
** Copy the current buffer's file path or dired path to `kill-ring'.
Result is full path.
If `universal-argument' is called first, copy only the dir path.

If in dired, copy the file/dir cursor is on, or marked files.

If a buffer is not file and not dired, copy value of `default-directory' (which is usually the “current” dir when that buffer was created)

URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
Version 2017-09-01
#+BEGIN_SRC emacs-lisp
  (defun xah-copy-file-path (&optional @dir-path-only-p)
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if @dir-path-only-p
           (progn
             (message "Directory path copied: 「%s」" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: 「%s」" $fpath)
           $fpath )))))
#+END_SRC
